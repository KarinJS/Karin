#!/usr/bin/env node

import fs from 'node:fs'
import path from 'node:path'
import { existsSync } from 'node:fs'
import { fileURLToPath } from 'node:url'

import task from 'tasuku'
import prompts from 'prompts'
import { getStr } from './tools'
import { green, red, yellow, magenta } from 'kolorist'
import { pingUrls, checkPnpm, installPnpm } from './tasks'

/**
 * ÂàõÂª∫Êñ∞È°πÁõÆ
 */
const createProject = async () => {
  const validateProjectName = (value: string) => {
    const dir = path.join(process.cwd(), value)
    if (existsSync(dir)) {
      return `ÁõÆÂΩï ${value} Â∑≤Â≠òÂú®ÔºåÊé®Ëçê‰ΩøÁî® ${value}-${getStr(5)}`
    }
    return true
  }

  const response = await prompts([
    {
      type: 'text',
      name: 'projectName',
      message: 'È°πÁõÆÂêçÁß∞:',
      initial: 'karin-project',
      validate: validateProjectName,
    },
    {
      type: 'select',
      name: 'template',
      message: 'ÈÄâÊã©È°πÁõÆÊ®°Êùø:',
      initial: 0,
      choices: [
        {
          title: `${yellow('Áîü‰∫ßÁéØÂ¢É')} ${green('(Êé®Ëçê)')}`,
          value: 'production',
          description: 'ÈÄÇÁî®‰∫éÂ§ßÂ§öÊï∞Áî®Êà∑ÁöÑÊ†áÂáÜÁéØÂ¢É',
        },
        {
          title: 'TypeScript ÂºÄÂèëÁéØÂ¢É',
          value: 'ts-plugin',
          description: 'Áî®‰∫éÂºÄÂèë TypeScript Êèí‰ª∂',
        },
        {
          title: 'JavaScript ÂºÄÂèëÁéØÂ¢É',
          value: 'js-plugin',
          description: 'Áî®‰∫éÂºÄÂèë JavaScript Êèí‰ª∂',
        },
      ],
    },
  ])

  if (!response.projectName || !response.template) {
    throw new Error('Êìç‰ΩúÂ∑≤ÂèñÊ∂à')
  }

  const template = response.template
  const targetDir = path.join(process.cwd(), response.projectName)

  const { result } = await task('Ê£ÄÊü•ÁΩëÁªúÁéØÂ¢É', async ({ setTitle }) => {
    const result = await pingUrls()
    if (result.ping) {
      setTitle(green('ÁΩëÁªúÁéØÂ¢ÉÊûÅ‰Ω≥ ^_^'))
    } else {
      setTitle(red('ÁΩëÁªúÁéØÂ¢ÉËæÉÂ∑Æ~'))
    }
    return result
  })

  await task.group(task => [
    task('Ê£ÄÊü• pnpm', async ({ setTitle }) => {
      const pnpm = await checkPnpm()
      if (pnpm) return setTitle('pnpm Â∑≤ÂÆâË£Ö')
      await installPnpm(result.suffix)
      setTitle('pnpm ÂÆâË£ÖÊàêÂäü')
    }),

    task('Ê≠£Âú®ÂàõÂª∫È°πÁõÆ', async ({ setTitle }) => {
      setTitle('Ê≠£Âú®ÂàõÂª∫È°πÁõÆ')
      const templateDir = path.join(
        fileURLToPath(import.meta.url),
        '../../templates',
        template
      )

      await fs.promises.mkdir(targetDir, { recursive: true })
      await fs.promises.cp(templateDir, targetDir, { recursive: true })

      const projectName = response.projectName
      const main = template === 'production' ? 'pnpm app' : 'pnpm dev'

      setTitle([
        '\n‚ú® È°πÁõÆÂàõÂª∫ÊàêÂäüÔºÅ',
        yellow('üëá ËØ∑ÊâßË°å‰ª•‰∏ãÂëΩ‰ª§Ôºö\n'),
        green(`  cd ${projectName}`),
        green('  pnpm install -P'),
        green(`  ${main}\n`),
        '  Âø´Êç∑Êåá‰ª§(‰∏ä‰∏ã‰ªªÈÄâÂÖ∂‰∏Ä):',
        magenta(`  cd ${projectName} && pnpm install -P && ${main}\n`),
        template === 'production'
          ? 'üöÄ ÂºÄÂßãÊÑâÂø´ÁöÑ‰ΩøÁî®ÂêßÔºÅ'
          : 'üöÄ ÂºÄÂßãÊÑâÂø´ÁöÑÂºÄÂèëÂêßÔºÅ',
      ].join('\n'))
    }),
  ])
}

/**
 * ÈáçÊñ∞ÂàùÂßãÂåñÂΩìÂâçÁõÆÂΩï
 */
const reinitProject = async () => {
  const response = await prompts([
    {
      type: 'select',
      name: 'template',
      message: 'ÈÄâÊã©È°πÁõÆÊ®°Êùø:',
      initial: 0,
      choices: [
        {
          title: `${yellow('Áîü‰∫ßÁéØÂ¢É')} ${green('(Êé®Ëçê)')}`,
          value: 'production',
          description: 'ÈÄÇÁî®‰∫éÂ§ßÂ§öÊï∞Áî®Êà∑ÁöÑÊ†áÂáÜÁéØÂ¢É',
        },
        {
          title: 'TypeScript ÂºÄÂèëÁéØÂ¢É',
          value: 'ts-plugin',
          description: 'Áî®‰∫éÂºÄÂèë TypeScript Êèí‰ª∂',
        },
        {
          title: 'JavaScript ÂºÄÂèëÁéØÂ¢É',
          value: 'js-plugin',
          description: 'Áî®‰∫éÂºÄÂèë JavaScript Êèí‰ª∂',
        },
      ],
    },
    {
      type: 'confirm',
      name: 'confirm',
      message: 'Ê≠§Êìç‰ΩúÂ∞ÜË¶ÜÁõñÂΩìÂâçÁõÆÂΩï‰∏ãÁöÑÊñá‰ª∂ÔºåÊòØÂê¶ÁªßÁª≠Ôºü',
      initial: false,
    },
  ])

  // Â¶ÇÊûúÁî®Êà∑ÂèñÊ∂àÊìç‰ΩúÔºåÂàôÊäõÂá∫ÈîôËØØ
  if (!response.template || !response.confirm) {
    throw new Error('Êìç‰ΩúÂ∑≤ÂèñÊ∂à')
  }

  /** Âà†Êéâ‰æùËµñ */
  const files = ['node_modules', 'package-lock.json', 'pnpm-lock.yaml', 'pnpm-lock.yaml', 'pnpm-lock.yaml', 'pnpm-lock.yaml']
  await Promise.all(files.map(file => fs.promises.rm(path.join(process.cwd(), file), { recursive: true, force: true })))

  /** ÈáçÊñ∞Â§çÂà∂ Â¶ÇÊûúÈÅáÂà∞ÂÜ≤Á™ÅÂàôÁõ¥Êé•Ë¶ÜÁõñ */
  const templateDir = path.join(
    fileURLToPath(import.meta.url),
    '../../templates',
    response.template
  )
  await fs.promises.cp(templateDir, process.cwd(), { recursive: true, force: true })

  const main = response.template === 'production' ? 'pnpm app' : 'pnpm dev'
  console.log([
    '\n‚ú® È°πÁõÆÈáçÊñ∞ÂàùÂßãÂåñÊàêÂäüÔºÅ',
    yellow('üëá ËØ∑ÈáçÊñ∞ÊâßË°å‰ª•‰∏ãÂëΩ‰ª§Ôºö\n'),
    green('  pnpm install -P'),
    green(`  ${main}\n`),
    '  Âø´Êç∑Êåá‰ª§(‰∏ä‰∏ã‰ªªÈÄâÂÖ∂‰∏Ä):',
    magenta(`  pnpm install -P && ${main}\n`),
    response.template === 'production'
      ? 'üöÄ ÂºÄÂßãÊÑâÂø´ÁöÑ‰ΩøÁî®ÂêßÔºÅ'
      : 'üöÄ ÂºÄÂßãÊÑâÂø´ÁöÑÂºÄÂèëÂêßÔºÅ',
  ].join('\n'))
}

/**
 * ÂÖ•Âè£ÂáΩÊï∞
 */
const main = async () => {
  try {
    const { mode } = await prompts({
      type: 'select',
      name: 'mode',
      message: 'ÈÄâÊã©Êìç‰ΩúÊ®°Âºè:',
      initial: 0,
      choices: [
        {
          title: `${green('Êñ∞Âª∫È°πÁõÆ')} ${green('(Êé®Ëçê)')}`,
          value: 'new',
          description: 'Âú®ÂΩìÂâçÁõÆÂΩïÂàõÂª∫Êñ∞ÁöÑÈ°πÁõÆ',
        },
        {
          title: `${yellow('ÈáçÊñ∞ÂàùÂßãÂåñ')}`,
          value: 'reinit',
          description: 'Âº∫Âà∂ÈáçÊñ∞ÂàùÂßãÂåñÂΩìÂâçÁõÆÂΩï',
        },
      ],
    }, {
      onCancel: () => {
        process.exit(1)
      },
    })

    if (!mode) {
      throw new Error('Êìç‰ΩúÂ∑≤ÂèñÊ∂à')
    }

    if (mode === 'new') {
      await createProject()
    } else {
      await reinitProject()
    }

    process.exit(0)
  } catch (err) {
    console.log(red('‚úñ ') + (err as Error).message)
    process.exit(1)
  }
}

main()

name: beta-version

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch: # 允许手动触发

jobs:
  publish-temp:
    runs-on: ubuntu-latest

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录，用于生成版本号

      - name: 安装node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 获取当前提交哈希
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          SHORT_COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "SHORT_COMMIT_HASH=$SHORT_COMMIT_HASH" >> $GITHUB_ENV
          echo "REPO_URL=https://github.com/${{ github.repository }}/tree/$COMMIT_HASH" >> $GITHUB_ENV

      - name: 安装依赖
        run: pnpm install

      - name: 编译
        run: pnpm build:all && cd packages/core && npm pkg delete peerDependencies
        id: build
        continue-on-error: true

      - name: 检查构建结果
        if: steps.build.outcome != 'success'
        run: |
          echo "❌ 构建失败！" >> $GITHUB_STEP_SUMMARY
          echo "提交哈希: ${{ env.SHORT_COMMIT_HASH }}" >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: 发布临时NPM包
        id: publish_pkg
        run: |
          # 显示当前目录
          echo "当前工作目录: $(pwd)"
          echo "文件列表:"
          ls -la
          
          # 将标准输出和标准错误都重定向到文件
          pnpx pkg-pr-new publish --compact './packages/core' './packages/create-karin' './packages/cli' --json output.json --comment=off > pkg-output.txt 2>&1

          # 显示文件内容和状态
          echo "pkg-output.txt 文件状态:"
          ls -la pkg-output.txt
          echo "文件内容:"
          cat pkg-output.txt || echo "无法显示文件内容"

          # 提取所有包的安装URL
          INSTALL_URLS=$(grep -oP 'https://pkg\.pr\.new/[^\s`]+' pkg-output.txt || echo "")
          if [ ! -z "$INSTALL_URLS" ]; then
              # 为每个包生成安装命令
              PNPM_INSTALL_CMD=""
              while read -r url; do
                  PNPM_INSTALL_CMD+="pnpm add ${url} -w\n"
              done <<< "$INSTALL_URLS"
          else
              PNPM_INSTALL_CMD="未找到安装命令"
          fi

          echo "pnpm_install_cmd<<EOF" >> $GITHUB_OUTPUT
          echo "$PNPM_INSTALL_CMD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 生成发布摘要
        run: |
          # 在工作流摘要中添加信息
          echo "## Published Packages :package:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "本体：" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.publish_pkg.outputs.pnpm_install_cmd }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 添加完整输出到摘要，方便查看
          echo "## Complete output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat pkg-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 发布 PR 评论
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ github.event.pull_request.number }}
          github-token: ${{ secrets.GITHUB_TOKEN  }}
          message: |
            你可以通过以下命令安装该版本：
            ```
            ${{ steps.publish_pkg.outputs.pnpm_install_cmd }}
            ```

      - name: 删除机器人评论
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 查找机器人评论的函数
            async function findBotComments(issueNumber) {
              if (!issueNumber) return [];
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              return comments.data.filter((comment) =>
                comment.body.includes('pnpm add')
              );
            }

            // 创建或更新评论
            async function createOrUpdateComment(issueNumber) {
              if (!issueNumber) {
                console.log('No issue number provided. Cannot post or update comment.');
                return;
              }

              // 获取所有机器人评论
              const botComments = await findBotComments(issueNumber);

              // 如果评论数超过3条，删除最旧的评论
              if (botComments.length >= 3) {
                // 按创建时间排序，旧的在前
                const commentsToDelete = botComments
                  .sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
                  .slice(0, botComments.length - 2); // 删除最旧的，保留2条旧评论+1条新评论=3条
                
                for (const comment of commentsToDelete) {
                  await github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id
                  });
                  console.log(`删除了旧评论 ID: ${comment.id}`);
                }
              }
            }

            // 只处理PR情况
            if (context.issue.number) {
              await createOrUpdateComment(context.issue.number);
            } else {
              console.log('No issue number found. Cannot post comment.');
            }

      - name: 上传NPM包信息
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-info
          path: |
            pkg-output.txt
            output.json

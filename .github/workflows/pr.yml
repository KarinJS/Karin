name: PR

# 监听 PR 相关事件
on:
  pull_request:
    # 监听 PR 被打开、重新打开和推送事件
    types: [opened, reopened, synchronize]

# 赋予 release-please-action 权限
permissions:
  contents: write
  pull-requests: write
jobs:
  # 设置 release-please 任务
  release-please:
    # 设置任务运行环境为 ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      # 设置 Node.js 环境
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          # 设置 Node.js 版本
          node-version: 20
          # 设置 npm 源
          registry-url: "https://registry.npmjs.org"
      # 安装依赖 不安装对等依赖
      - name: 安装依赖
        run: npm install --config.auto-install-peers=false --ignore-scripts --omit=peer
      # 构建输出
      - name: 构建输出
        id: build
        run: npm run build > build.log 2>&1
        continue-on-error: true # 捕获失败并允许后续步骤运行
      # 获取当前 PR 编号并设置环境变量
      - name: 获取 PR 编号
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      # 自动修改 package.json 的版本号、删除开发、对等依赖
      - name: 修订版本号
        run: npm run pr all
        if: success()
      # 发布到 npm
      - name: 发布到 npm
        run: npm run pub-beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: success()
      # 在 PR 上发布构建完成或失败信息
      - name: 发布评论
        run: |
          # 获取当前PR的所有评论（此时应该是一个JSON格式的字符串）
          comments=$(gh pr view ${{ env.PR_NUMBER }} --json comments --jq '.comments')

          # 打印所有评论，检查是否是合法的JSON字符串
          echo "$comments"

          # 将获取的字符串反序列化为JSON格式
          comment_data=$(echo "$comments" | jq 'fromjson')

          # 如果从json解析失败，退出
          if [ $? -ne 0 ]; then
            echo "无法解析评论数据为JSON格式，退出！"
            exit 1
          fi

          # 获取当前PR所有评论的ID和内容
          comment_data=$(echo "$comment_data" | jq -r '.[] | {id: .id, body: .body}')

          # 构建失败或成功的评论内容
          if [ "${{ steps.build.outcome }}" = "failure" ]; then
            # 捕获构建失败日志
            ERROR_MESSAGE=$(cat build.log || echo "未找到详细的构建日志。")
            comment_body=$'❌ 构建失败！以下是错误日志：\n\n<details>\n<summary>展开查看错误日志</summary>\n\n```\n'"${ERROR_MESSAGE}"$'\n```\n\n</details>'
          else
            INSTALL_COMMAND_1="pnpm rm ${{ env.PKG_NAME }} && pnpm install ${{ env.PKG_NAME }}@${{ env.PKG_VERSION }} -D"           
            INSTALL_COMMAND_2="pnpm install ${{ env.PKG_NAME }}@${{ env.PKG_VERSION }} -w"
            comment_body=$'🎉 构建完成！您可以通过以下命令安装此版本：\n\n```\n'"${INSTALL_COMMAND_1}"$'\n```\n\n```\n'"${INSTALL_COMMAND_2}"$'\n```'
          fi

          # 发布新的评论
          gh pr comment ${{ env.PR_NUMBER }} --body "$comment_body"

          # 获取所有目标评论的ID
          target_comment_ids=$(echo "$comment_data" | grep -E "构建完成|构建失败" | jq -r '.[].id')

          # 如果评论数足够多且有目标评论，则删除多余评论
          comment_count=$(echo "$target_comment_ids" | wc -l)

          # 如果评论数超过3条，删除超过的评论
          if [ "$comment_count" -ge 3 ]; then
            comment_ids_to_delete=$(echo "$target_comment_ids" | tail -n +4) # 获取超过3条评论的ID
            for id in $comment_ids_to_delete; do
              gh pr comment ${{ env.PR_NUMBER }} --delete --comment-id $id
            done
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}

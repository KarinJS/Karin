name: PR Comment Trigger

# 监听 PR 评论事件
on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  process-comment:
    # 只在 PR 上的评论且评论内容为 "/build" 时运行
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/run-build')
    runs-on: ubuntu-latest
    steps:
      # 首先检查评论者是否有仓库写入权限
      - name: 检查评论者权限
        id: check-permission
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.payload.comment.user.login
              });
              
              // 只允许有 admin 或 write 权限的用户触发构建
              const hasPermission = ['admin', 'write'].includes(permission.permission);
              console.log(`用户 ${context.payload.comment.user.login} 的权限级别: ${permission.permission}`);
              console.log(`是否有权限触发构建: ${hasPermission}`);
              return hasPermission;
            } catch (error) {
              console.log(`获取权限失败: ${error}`);
              return false;
            }

      # 如果没有权限，则回复评论并退出
      - name: 回复无权限信息
        if: steps.check-permission.outputs.result == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ 你没有触发构建的权限。只有仓库成员可以使用 `/run-build` 命令。'
            });

      # 如果有权限，获取 PR 详情
      - name: 获取 PR 详情
        if: steps.check-permission.outputs.result == 'true'
        id: get-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            return {
              head_sha: pullRequest.head.sha,
              head_ref: pullRequest.head.ref,
              head_repo: pullRequest.head.repo.full_name
            };

      # 回复开始构建的消息
      - name: 回复开始构建信息
        if: steps.check-permission.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🔄 构建已触发，正在处理...'
            });

      # 检出 PR 代码
      - name: 检出代码
        if: steps.check-permission.outputs.result == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head_sha }}
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head_repo }}
          fetch-depth: 0

      # 设置 pnpm
      - name: 设置 pnpm
        if: steps.check-permission.outputs.result == 'true'
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # 设置 Node.js 环境
      - name: 设置 Node.js 环境
        if: steps.check-permission.outputs.result == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          cache: pnpm

      # 使用 pnpm 安装依赖
      - name: 安装依赖
        if: steps.check-permission.outputs.result == 'true'
        run: pnpm install

      # 构建输出
      - name: 构建输出
        if: steps.check-permission.outputs.result == 'true'
        id: build
        run: |
          pnpm run build:all > build.log 2>&1 || {
            echo "构建失败，错误日志："
            cat build.log
            exit 1
          }
        continue-on-error: true

      # 获取当前 PR 编号并设置环境变量
      - name: 获取 PR 编号
        if: steps.check-permission.outputs.result == 'true'
        id: get_pr
        run: |
          echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV || {
            echo "获取 PR 编号失败"
            exit 1
          }
        continue-on-error: true

      # 自动修改 package.json 的版本号、删除开发、对等依赖
      - name: 修订版本号
        if: steps.check-permission.outputs.result == 'true'
        id: version
        run: |
          pnpm --filter node-karin run pr || {
            echo "修订版本号失败"
            exit 1
          }
        continue-on-error: true

      # 发布到 npm
      - name: 发布到 GitHub Package Registry
        if: steps.check-permission.outputs.result == 'true'
        id: publish
        run: cd packages/core && npm publish --access public --tag beta --registry https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        continue-on-error: true

      # 在 PR 上发布构建完成或失败信息
      - name: 发布评论
        if: steps.check-permission.outputs.result == 'true'
        run: |
          # 收集所有步骤的状态
          BUILD_STATUS="${{ steps.build.outcome }}"
          PR_STATUS="${{ steps.get_pr.outcome }}"
          VERSION_STATUS="${{ steps.version.outcome }}"
          PUBLISH_STATUS="${{ steps.publish.outcome }}"

          # 构建错误消息
          ERROR_MESSAGE=""
          if [ "$BUILD_STATUS" = "failure" ]; then
            ERROR_MESSAGE+=$'构建步骤失败！\n'
            ERROR_MESSAGE+=$(cat build.log || echo "未找到构建日志。")$'\n\n'
          fi
          if [ "$PR_STATUS" = "failure" ]; then
            ERROR_MESSAGE+=$'获取 PR 编号失败！\n\n'
          fi
          if [ "$VERSION_STATUS" = "failure" ]; then
            ERROR_MESSAGE+=$'修订版本号失败！\n\n'
          fi
          if [ "$PUBLISH_STATUS" = "failure" ]; then
            ERROR_MESSAGE+=$'发布到 GitHub Package Registry 失败！\n\n'
          fi

          if [ ! -z "$ERROR_MESSAGE" ]; then
            # 发布错误信息评论
            gh pr comment ${{ env.PR_NUMBER }} --body $'❌ 构建过程中出现错误！\n\n<details>\n<summary>展开查看错误日志</summary>\n\n```\n'"${ERROR_MESSAGE}"$'\n```\n\n</details>'
          else
            # 构建成功评论
            INSTALL_COMMAND_1="pnpm rm ${{ env.PKG_NAME }} && pnpm install ${{ env.PKG_NAME }}@${{ env.PKG_VERSION }} -D"           
            INSTALL_COMMAND_2="pnpm install ${{ env.PKG_NAME }}@${{ env.PKG_VERSION }} -w"
            gh pr comment ${{ env.PR_NUMBER }} --body $'🎉 构建完成！请不要使用此版本，正在重构中：\n\n```\n'"${INSTALL_COMMAND_1}"$'\n```\n\n```\n'"${INSTALL_COMMAND_2}"$'\n```'
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}

      # 撤回历史评论 保留最新的3条评论
      - name: 撤回历史评论
        if: steps.check-permission.outputs.result == 'true'
        run: |
          # 获取当前PR的所有评论
          comments=$(gh pr view ${{ env.PR_NUMBER }} --json comments)

          # 过滤目标评论并按时间排序
          target_comments=$(echo "$comments" | jq -r '.comments[] | select(.body | test("🎉 构建完成！|❌ 构建失败！|构建过程中出现错误")) | {url: .url, created_at: .createdAt}' | jq -s '. | sort_by(.created_at) | reverse')

          # 获取需要删除的评论ID (保留最新的3条)
          comment_ids_to_delete=$(echo "$target_comments" | jq -r 'if length > 3 then .[3:][] | .url | capture("#issuecomment-(?<id>\\d+)$").id else empty end')

          # 删除旧评论
          if [ ! -z "$comment_ids_to_delete" ]; then
            for id in $comment_ids_to_delete; do
              # 调试信息
              echo "删除请求URL: /repos/${{ github.repository }}/issues/comments/$id"
                response=$(curl -L \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.RELEASE }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -w "%{http_code}" \
                -o /dev/null \
                "https://api.github.com/repos/${{ github.repository }}/issues/comments/$id")
              if [ "$response" = "204" ]; then
                echo "✓ 成功删除评论 $id"
              else
                echo "❌ 删除评论 $id 失败，HTTP状态码: $response"
                exit 1
                fi
            done
          else
            echo "没有需要删除的历史评论"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}
